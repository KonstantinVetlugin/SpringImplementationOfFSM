package ru.niias.fsm;

import org.springframework.beans.factory.support.StaticListableBeanFactory;
import org.springframework.statemachine.StateMachine;
import org.springframework.statemachine.config.StateMachineBuilder;

import java.util.EnumSet;

public class SpringImp{

       public StateMachine<States, Events> buildMachine() throws Exception {
        StateMachineBuilder.Builder<States, Events> builder = StateMachineBuilder.builder();
        builder.configureStates()
                .withStates()
                .initial(States.INIT)
                .states(EnumSet.allOf(States.class));
        builder.configureTransitions()
                .withExternal()
                .source(States.INIT)
                .target(States.REQUEST)
                .event(Events.REQUEST)
                .and()
                .withExternal()
                .source(States.INIT)
                .target(States.FORM_UPDATED)
                .event(Events.UPDATE)
                .and()

                .withExternal()
                .source(States.REQUEST)
                .target(States.FORM_UPDATED)
                .event(Events.UPDATE)
                .and()
                .withExternal()
                .source(States.REQUEST)
                .target(States.REQUEST)
                .event(Events.TIMER)
                .and()
                .withExternal()
                .source(States.REQUEST)
                .target(States.INIT)
                .event(Events.FINISH)
                .and()

                .withExternal()
                .source(States.FORM_UPDATED)
                .target(States.FORM_UPDATED)
                .event(Events.TIMER)
                .and()
                .withExternal()
                .source(States.FORM_UPDATED)
                .target(States.REQUEST)
                .event(Events.REQUEST)
                .and()
                .withExternal()
                .source(States.FORM_UPDATED)
                .target(States.CONFIRMED)
                .event(Events.LOAD_AND_CONFIRM)
                .and()
                .withExternal()
                .source(States.FORM_UPDATED)
                .target(States.LOADED)
                .event(Events.LOAD)
                .and()
                .withExternal()
                .source(States.FORM_UPDATED)
                .target(States.LOAD_ERROR)
                .event(Events.LOAD_ERROR)
                .and()
                .withExternal()
                .source(States.FORM_UPDATED)
                .target(States.INIT)
                .event(Events.FINISH)
                .and()

                .withExternal()
                .source(States.LOADED)
                .target(States.LOADED)
                .event(Events.TIMER)
                .and()
                .withExternal()
                .source(States.LOADED)
                .target(States.REQUEST)
                .event(Events.REQUEST)
                .and()
                .withExternal()
                .source(States.LOADED)
                .target(States.CONFIRMED)
                .event(Events.CONFIRM)
                .and()
                .withExternal()
                .source(States.LOADED)
                .target(States.CONFIRM_ERROR)
                .event(Events.CONFIRM_ERROR)
                .and()
                .withExternal()
                .source(States.LOADED)
                .target(States.FORM_UPDATED)
                .event(Events.UPDATE)
                .and()
                .withExternal()
                .source(States.LOADED)
                .target(States.FINISHED)
                .event(Events.FINISH)
                .and()

                .withExternal()
                .source(States.LOAD_ERROR)
                .target(States.LOADED)
                .event(Events.LOAD)
                .and()
                .withExternal()
                .source(States.LOAD_ERROR)
                .target(States.REQUEST)
                .event(Events.REQUEST)
                .and()
                .withExternal()
                .source(States.LOAD_ERROR)
                .target(States.INIT)
                .event(Events.FINISH)
                .and()
                .withExternal()
                .source(States.LOAD_ERROR)
                .target(States.FORM_UPDATED)
                .event(Events.UPDATE)
                .and()

                .withExternal()
                .source(States.CONFIRMED)
                .target(States.CONFIRMED)
                .event(Events.TIMER)
                .and()
                .withExternal()
                .source(States.CONFIRMED)
                .target(States.REQUEST)
                .event(Events.REQUEST)
                .and()
                .withExternal()
                .source(States.CONFIRMED)
                .target(States.FINISHED)
                .event(Events.FINISH)
                .and()
                .withExternal()
                .source(States.CONFIRMED)
                .target(States.FORM_UPDATED)
                .event(Events.UPDATE)
                .and()

                .withExternal()
                .source(States.CONFIRM_ERROR)
                .target(States.REQUEST)
                .event(Events.REQUEST)
                .and()
                .withExternal()
                .source(States.CONFIRM_ERROR)
                .target(States.FINISHED)
                .event(Events.FINISH)
                .and()
                .withExternal()
                .source(States.CONFIRM_ERROR)
                .target(States.FORM_UPDATED)
                .event(Events.UPDATE)
                .and()

                .withExternal()
                .source(States.FINISHED)
                .target(States.FINISHED)
                .event(Events.TIMER)
                .and()
                .withExternal()
                .source(States.FINISHED)
                .target(States.REQUEST)
                .event(Events.REQUEST)
                .and()
                .withExternal()
                .source(States.FINISHED)
                .target(States.FORM_UPDATED)
                .event(Events.UPDATE);
        builder.configureConfiguration().withConfiguration().beanFactory(new StaticListableBeanFactory());
        return builder.build();
    }
}
